-- phpMyAdmin SQL Dump
-- version 4.8.0.1
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- 생성 시간: 18-05-25 08:33
-- 서버 버전: 5.7.22
-- PHP 버전: 7.0.30

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- 데이터베이스: `ressystem`
--
CREATE DATABASE IF NOT EXISTS `ressystem` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
USE `ressystem`;

-- --------------------------------------------------------

--
-- 테이블 구조 `commentlist`
--

CREATE TABLE `commentlist` (
  `comment_id` int(11) NOT NULL,
  `starpoint` float DEFAULT NULL,
  `movie_id` int(11) NOT NULL,
  `customer_id` int(11) NOT NULL,
  `message` text NOT NULL,
  `datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `commentlist`
--

INSERT INTO `commentlist` (`comment_id`, `starpoint`, `movie_id`, `customer_id`, `message`, `datetime`) VALUES
(1, 9, 2, 1, '어벤져스:인피니티 워는 지금까지 나왔던 그 어떤 마블 영화보다도 \'스탠딩 얼론\'하지 않은 영화입니다. 이 영화는 영화 자체의 재미나 완성도를 넘어서, 지난 10년간의 MCU에게 품위있는 작별을 고하고, 향후 10년, 혹은 그 이상 이어질 MCU의 미래 계획을 소개하는 역할을 하고 있기 때문입니다. 그렇기에 이 영화 단독으로는 사실 어떤 평가를 내리기 어렵습니다. 은퇴식과 환영회를 겸하는 그 메인 이벤트는 어벤져스4가 될 것이고, 그 작품이 얼마나 훌륭한지에 따라 \'전야제\'역할을 하고 있는 이 작품의 가치가 결정될 것입니다. 하지만 지난 10년간 마블의 영웅들을 보며 즐거워했던 팬들이라면, 역시 이 전야제에 참석하지 않을 수 없고, 즐기지 않을 수는 없는 것입니다. 아직 메인이벤트는 베일에 싸여있지만, 그 동안 멋진 작품을 많이 만들어 온 마블이니만큼, 우아하고 품위있는 작별, 그리고 기운차고 빛나는 만남을 기대해도 좋을 것 같습니다.', '2018-05-21 02:13:35'),
(2, 10, 2, 1, '이 영화는 어벤져스같은 미제앞잡이 벌레 무리들에 대한 영화가 아닌 우주를 진정으로 사랑하는 마음씨와 노블리스 오블리쥬의 정신을 가진 퓨어블러드 타노스가 선지자의 깨우침을 알지 못 한 우매하고 멍청한 어벤져스의 방해를 물리치고 자신의 피와 땀을 바쳐 우주의 평화를 어떻게 이룩하는가에 대한 내용을 다룬 감동적인 단독 영화이다.', '2018-05-21 02:13:35'),
(3, 8, 3, 3, '가족들이 깜박잊고 맥컬리 컬킨을 집에 혼자두고 여행을 가버립니다. 혼자남은 주인공이 도둑들을 혼내주는 장면이 잔인하면서도 매우 재미있습니다. 기발한 아이디어 특히 비디오를 틀어놓고 장난치는 장면은 정말 웃기더군요. 가족들의 소중함을 일깨워주는 재미있는 영화입니다.', '2018-05-21 02:13:35'),
(4, 9, 5, 2, '아직 많이 봤다고 할 수 없지만 적어도 5번 이상은 본 영화이다. 나는 배웠던 것을 배우거나 본 것을 또 보는 것을 좋아하지 않는 편인데도, 클래식만큼은 자꾸 보게된다. 볼 때마다 있는 감동이 너무나도 크기 때문이다. 이 영화는 정말 모든 요소를 갖춘 것 같다. 어쩜 그리 탄탄한 구성을 할 수 있을까… 나왔던 연기자들 모두 탄탄한 연기력을 갖추고 있는 조승우, 손예진, 조인성 그 외에 많은 조연들 모두 다 그 배역과 하나되는 연기를 한 듯 싶다. 무엇보다 내가 이 영화를 좋아하는 이유는 정말 \' 순수 \' 그 자체의 영화이기 때문이다.', '2018-05-21 02:13:35'),
(5, 7.5, 4, 2, '매트릭스. 내가 실제로 매트릭스안에 살고있다는 착각을 줄 정도의 사상적 충격이 큰 영화였으며 2,3편도 아주 내용이 훌륭하게 끝이났다. 과학의 발전에대한 강한 비판을 뜻하기도하며 A.I가 우리 인류에게 가져올 부정적인면을 아주 잘 그려냄으로써 사회에 지대한 영향을 끼친것같다.”),\r\n(\'10.0\', \'7\', \'1\', “무대인사 시사회 당첨되서 이제훈님 보려고 갔는데 영화는 솔직히 기대 하나도 안했다. 그런데 이게웬걸.. 진심 올해 최고의영화!!!!!!!!!!! 보는내내 엄청 웃고!! 후반부에서는 엄청 울고.. 아니 끊임없이 계속 눈물이 나오는 정말 재미도 재미지만 너무 감동있고 정말 보고나서도 여운이 계속남는 영화!!! 무료로 본게 너무 죄송할정도로.. 군함도 보고 왜 영화를 이렇게 만들었지 하고 기분이 정말 안좋았는데 이 영화는 진짜 내용도 탄탄하고 우리나라 사람으로서 정말 잘만들었다고 생각된다 이런영화는 정말 많이들 봐줘야한다고 생각들어서 이런 리뷰 정말 안적는데 리뷰까지 적어본다. 개봉하면 내돈주고 또 보러갈 예정이다!!! 정말 최고!!!', '2018-05-21 02:13:35'),
(6, 3, 7, 4, '첨에는 건설사의 재개발을 중점으로 내용이전개되다가 초기에 영어배울라던 이유인 남동생과 왜 헤어졋는지 그런 이유도 설명안하고 뜬금없이 xxx라니... 갑자기 xxx로 이야기를 맞추어 억지로 눈물 뽑는 씩으로 바꼇다 너무 뜬금없이 그이야기가 나오니까 할말을 잃엇다 결국 내용은 건설사 재개발이랑 남동생얘기는 전혀 먼나라 이야기 되고 ~~주인공은 갑자기 홍길동도 아니고 동해번쩍서해번쩍 나라 반대편이동하고~ 영화가 주려는 메세지가 무엇인지 알 수가 없다. 도대체 초반에 그 음산한 분위기는 왜만들었으며 재개발에 관련된 이야기를 중심으로 왤케 강조를 하였을까. 첨에 임팩트 있는 화면은 그냥 소리없이 내용을 지워버리는 클라스.', '2018-05-21 02:13:35'),
(7, 8.5, 17, 1, '정말 재미있게 봤는데 해리포터 같은 영화보다 배경음악이 살아 있어서 영화가 멋지고 음악 때문에 감동이 살아나는 것 같더군요…', '2018-05-21 02:13:35'),
(8, 1, 8, 5, '이거 원장이..이민가면서 그냥방치해둔건데.. 흉가도아니고..실제 근처 사는 주민들도 골칫거리라는데.. 대단하네요…', '2018-05-21 02:13:35'),
(9, 7, 11, 3, '제가.. 솔직히 해리포터 소설은 정말 싫어했습니다... 아는 오빠가 해리포터 소설을 보는게.. 이상했어요.. 글로 가득 찬 이상한 이야기를 왜 볼까... 그런데.. 영화가 나오자.. 저희 아버지께서 보자고 하시더군요.. 그런데.. 한번 보니.. 정말 잊혀질 수 없는 그런 영화입니다. \'소설을 그대로 옮겼다. 또는 재미가 없다\' 라는 말이 수없이 맴돌고 있지만.. 전.. 정말 재미있는 그런 영화를 본 것이죠.. 오직하면.. 크리스마스 선물을 해리포터 영화 (비밀의방) 로 바꿀 수 있을까요?? 강력 추천합니다.. 비디오라도 보식 바랍니다.. *ps 언제 해리포터와 아즈카반의 죄수 방영하죠.', '2018-05-21 02:13:35'),
(10, 10, 5, 1, '손예진 너무 예뻐요.....하트하트', '2018-05-25 17:25:57'),
(11, 7, 17, 1, '일라이저 우드 너무 잘생겼어욥..', '2018-05-25 17:26:43'),
(12, 8, 3, 1, 'ㅋㅋㅋㅋ짱재미슴 ㅋㅋㅋ', '2018-05-25 17:27:27'),
(13, 8, 4, 1, '키야 ~~~~~~~~~~~~~~~~~~~~~~~~~~~쩔어영 ~~~!!! !! !', '2018-05-25 17:28:31'),
(14, 5, 8, 1, '어ㅜ우진짜 너무 무서워요 어우 어우', '2018-05-25 17:32:08'),
(15, 7, 7, 3, '음....재밌긴 한데 ㅋㅋㅋㅋ', '2018-05-25 22:05:31'),
(16, 8, 4, 3, '와 개재밌어여 ~~', '2018-05-25 22:06:25'),
(17, 5, 8, 3, '어 보다가 나왔네요 ㅠㅠ 개무서움', '2018-05-25 22:06:42'),
(18, 9, 2, 3, '오 ~~ 게ㅐㄴ찮네염 .', '2018-05-25 22:07:00'),
(19, 10, 5, 3, '클래식 클래식하고 좋아요 굿 짱 킹왕짱', '2018-05-25 22:07:37'),
(20, 10, 17, 3, '진짜 최고의 ㅠ 판타지 영화입니다.', '2018-05-25 22:08:14'),
(21, 6, 2, 2, '저는 그냥 그랬네요...실망', '2018-05-25 22:09:18'),
(22, 5, 17, 2, '고오올루움', '2018-05-25 22:09:31'),
(23, 2, 3, 2, '청소년 유해영화입니다 ㅡㅡ', '2018-05-25 22:09:46'),
(24, 10, 11, 2, '해리포터.....몇 번을 봐도 재밌습니다.', '2018-05-25 22:10:14'),
(25, 9, 8, 2, '정말 무서워요~~~!!!!!!!!!!!! ㅜㅠㅠㅠㅠㅠㅠㅠㅠㅎ심약하신 분들은 보지마세오', '2018-05-25 22:10:30'),
(26, 8, 7, 2, '넘슬퍼요ㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠ ', '2018-05-25 22:10:54'),
(27, 7, 6, 2, '수지 짱예~', '2018-05-25 22:11:22'),
(28, 6, 1, 2, '음..저는 그냥 그랬네요', '2018-05-25 22:11:39'),
(29, 2, 10, 2, '어흌ㅋㅋㅋㅋㅋ', '2018-05-25 22:11:59'),
(30, 8, 19, 2, '흫헣허 연ㅁ기잘하네요 ㅋㅋㅋㅋㅋ', '2018-05-25 22:12:13'),
(31, 9, 16, 2, '저도 반지 원정대 끼워주세요 ㅠㅠㅠ어엉ㅇ', '2018-05-25 22:12:51'),
(32, 6, 9, 2, '음....기대보다 별로.', '2018-05-25 22:13:26'),
(33, 3, 18, 2, '아놔..씨쥐 티 너무 나네요.', '2018-05-25 22:13:50'),
(34, 7, 15, 2, '불사조 기사단에 저도 끼워주세요~~~~~~', '2018-05-25 22:14:41'),
(35, 9, 14, 2, '저는 뭐가 나올까요 ~~~~~~히히힣', '2018-05-25 22:15:07'),
(36, 6, 12, 2, '너무 궁금해요~~비밀의 방이 뭘까?', '2018-05-25 22:15:24'),
(37, 9, 13, 2, '죄가 많네..', '2018-05-25 22:15:48'),
(38, 8, 6, 4, '한가인 눈크다', '2018-05-25 22:17:19'),
(39, 2, 8, 4, '보다가 팝콘 집어던짐;;', '2018-05-25 22:17:37'),
(40, 10, 1, 4, '엄청나네요.', '2018-05-25 22:17:59'),
(41, 8, 5, 4, '두근두근하네요.......ㅎㅎ', '2018-05-25 22:18:36'),
(42, 8, 16, 4, '짱재미슴~', '2018-05-25 22:18:56'),
(43, 8, 13, 4, '벅빅 타보고싶다', '2018-05-25 22:19:23'),
(44, 9, 11, 4, '볼드모트 나뿌놈 ㅠ ', '2018-05-25 22:55:46'),
(45, 7, 16, 4, '벌링블링 반지', '2018-05-25 22:56:29'),
(46, 10, 2, 4, '어벤졀쓰~', '2018-05-25 22:56:43'),
(47, 8, 14, 4, '오우 스릴있어요', '2018-05-25 22:57:19'),
(48, 9, 5, 7, '청순청순..', '2018-05-25 23:10:54'),
(49, 10, 2, 7, '최고', '2018-05-25 23:11:09'),
(50, 8, 11, 7, '나도 그 돌 줘', '2018-05-25 23:12:10'),
(51, 9, 13, 7, '스네이프 쉬익쉬익', '2018-05-25 23:12:25'),
(52, 8, 14, 7, '윙가르디움 레비오우사', '2018-05-25 23:12:40'),
(53, 10, 16, 7, '일라이저 우드..........주머니에 넣고 다니고 싶어요.', '2018-05-25 23:12:59');

-- --------------------------------------------------------

--
-- Stand-in structure for view `countlikenum`
-- (See below for the actual view)
--
CREATE TABLE `countlikenum` (
`counter` bigint(21)
,`comment_id` int(11)
);

-- --------------------------------------------------------

--
-- Stand-in structure for view `cuscomlike`
-- (See below for the actual view)
--
CREATE TABLE `cuscomlike` (
`username` varchar(100)
,`comment_id` int(11)
,`customer_id` int(11)
,`movie_id` int(11)
,`starpoint` float
,`datetime` datetime
,`message` text
);

-- --------------------------------------------------------

--
-- Stand-in structure for view `customer`
-- (See below for the actual view)
--
CREATE TABLE `customer` (
`username` varchar(100)
,`customer_id` int(11)
,`comment_id` int(11)
);

-- --------------------------------------------------------

--
-- 테이블 구조 `customerlist`
--

CREATE TABLE `customerlist` (
  `customer_id` int(11) NOT NULL,
  `firstname` varchar(100) NOT NULL,
  `lastname` varchar(100) NOT NULL,
  `email` varchar(100) NOT NULL,
  `username` varchar(100) NOT NULL,
  `password` varchar(100) NOT NULL,
  `customer_type` varchar(20) DEFAULT 'Gold'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `customerlist`
--

INSERT INTO `customerlist` (`customer_id`, `firstname`, `lastname`, `email`, `username`, `password`, `customer_type`) VALUES
(1, 'dojin', 'kim', 'henrylabstudy@gmail.com', 'henrylab', 'henrylab', 'Gold'),
(2, 'kyungsang', 'yoo', 'ky13@hanmail.net', 'ky13', 'ky13', 'VIP'),
(3, 'eunbi', 'cha', 'chacha@handong.edu', 'chacha', 'chacha', 'Gold'),
(4, 'sojeong', 'shim', 'shim@naver.com', 'sj15', 'sj15', 'Gold'),
(5, 'jaechang', 'nam', 'jc@handong.edu', 'jc', 'jcjc', 'VIP'),
(6, 'david', 'beckham', 'beckham7@gmail.com', 'beckham7', 'beckham7', 'Gold'),
(7, 'michael', 'jordan', 'jordan23@gmail.com', 'jordan23', 'jordan23', 'VIP'),
(8, 'heungmin', 'son', 'sonsation7@naver.com', 'sonsation7', 'sonsation7', 'VVIP'),
(9, 'dragon', 'kwon', 'gdswagger@hanmail.net', ' gdswagger', 'gdswagger', 'VVIP'),
(10, 'david', 'silva', 'silvacity@gmail.com', 'silvacity', 'silvacity', 'Gold'),
(11, 'ibrahimovic', 'zlatan', 'worldbest@gmail.com', 'worldbest', 'worldbest', 'VIP'),
(12, 'yuna', 'kim', 'queeninince@naver.com', 'queeninice', 'queeninice', 'VIP');

-- --------------------------------------------------------

--
-- 테이블 구조 `likelist`
--

CREATE TABLE `likelist` (
  `comment_id` int(11) NOT NULL,
  `customer_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `likelist`
--

INSERT INTO `likelist` (`comment_id`, `customer_id`) VALUES
(1, 1),
(3, 1),
(4, 1),
(8, 1),
(14, 1),
(1, 2),
(2, 2),
(1, 3),
(2, 3),
(4, 3),
(5, 3),
(1, 5),
(3, 5),
(1, 6);

-- --------------------------------------------------------

--
-- 테이블 구조 `movieinfolist`
--

CREATE TABLE `movieinfolist` (
  `movie_id` int(11) NOT NULL,
  `title` varchar(50) DEFAULT NULL,
  `genre` varchar(20) DEFAULT NULL,
  `nation` varchar(20) DEFAULT NULL,
  `running_time` int(11) DEFAULT NULL,
  `release_date` date DEFAULT NULL,
  `director` varchar(50) DEFAULT NULL,
  `actor` varchar(80) DEFAULT NULL,
  `is_rated` int(11) DEFAULT NULL,
  `content` text,
  `studio` varchar(50) DEFAULT NULL,
  `poster_img` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `movieinfolist`
--

INSERT INTO `movieinfolist` (`movie_id`, `title`, `genre`, `nation`, `running_time`, `release_date`, `director`, `actor`, `is_rated`, `content`, `studio`, `poster_img`) VALUES
(1, '그래비티', 'SF, 드라마', '해외', 90, '2013-10-17', '알폰소 쿠아론', '산드라 블록, 조지 클루니', 12, '외계인도 우주전쟁도 없다! 이것이, 누구도 경험하지 못한 진짜 재난이다! 지구로부터 600km, 소리도 산소도 없다. 우주에서의 생존은 불가능하다. 허블 우주망원경을 수리하기 위해 우주를 탐사하던 스톤 박사는 폭파된 인공위성의 잔해와 부딪히면서 그곳에 홀로 남겨지는데…', '워너 브라더스', 'poster/그래비티.jpg'),
(2, '어벤져스: 인피니티 워', '액션, 모험, 판타지, SF', '해외', 149, '2018-04-25', '안소니 루소, 조 루소', '로버트 다우니 주니어, 조슈 브롤린, 크리스 헴스워스, 베네딕트 컴버배치, 크리스 프랫, 마크 러팔로, 톰 홀랜드, 채드윅 보스만', 12, '새로운 조합을 이룬 어벤져스, 역대 최강 빌런 타노스에 맞서 세계의 운명이 걸린 인피니티 스톤을 향한 무한 대결이 펼쳐진다! 4월, 마블의 클라이맥스를 목격하라!', '월트 디즈니', 'poster/어벤져스 인피니티 워.jpg'),
(3, '나 홀로 집에', '모험, 범죄, 가족, 코미디', '해외', 105, '1991-07-06', '크리스 콜럼버스', '맥컬리 컬킨, 조 페시, 다니엘 스턴, 존 허드, 로버츠 브로좀, 캐서린 오하라', 0, '이제 혼자 남은 꼬마 캐빈의 기발한 집지키기 전쟁이 시작된다! 크리스마스 시즌의 시카고. 말썽꾸러기라 집안 가족들로부터 욕을 듣고 따돌림 당하는 케빈은 가족들이 모두 없어졌으면 좋겠다고 생각한다. 케빈의 가족들은 늦잠을 자게 되어 비행기 시간을 맞추기 위해 허둥대다가 그만 3층 다락방에서 잠이 든 케빈을 두고 떠난다. 혼자 집에 남은 케빈은 형과 누나 방을 구경하면서 즐거워한다. 그런데 빈집털이 2인조 도둑이 케빈의 집을 호시탐탐 노리고 있다는 것을 알게 되는데...', '휴스 엔터테인먼트', 'poster/나 홀로 집에.jpg'),
(4, '매트릭스', 'SF, 액션', '해외', 136, '1999-05-15', '릴리 워쇼스키, 라나 워쇼스키', '키아누 리브스, 로렌스 피시번, 캐리 앤 모스, 휴고 위빙, 글로리아 포스터', 12, '서기 2199년, 인공지능 AI에 의해 인류가 재배되고 있다! 인간의 기억마저 AI에 의해 입력되고 삭제 되는 세상.진짜보다 더 진짜 같은 가상 현실 \'매트릭스\' 그 속에서 진정한 현실을 인식할 수 없게 재배되는 인간들. 그 \'매트릭스\'를 빠져 나오면서 AI에게 가장 위험한 인물이 된 \'모피어스\'는 자신과 함께 인류를 구할 마지막 영웅 \'그\'를 찾아 헤맨다.', '워너 브라더스, 실버 픽처스', 'poster/매트릭스.jpg'),
(5, '클래식', '멜로, 로맨스, 드라마', '국내', 132, '2003-01-30', '곽재용', '손예진, 조승우, 조인성', 12, '우연히, 우연히, 우연히... 그러나... 반드시 잊혀진 약속이 깨어났다. 같은 대학에 다니는 지혜(손예진 분)와 수경(이수인 분)은 연극반 선배 상민(조인성 분)을 좋아한다. 하지만 호들갑스런 수경이 상민에게 보낼 편지의 대필을 부탁하고, 지혜는 수경의 이름으로 상민을 향한 자신의 감정을 고백한다. 지혜의 편지로 맺어진 수경과 상민이 가까워지면서 지혜는 괜한 죄의식에 상민을 멀리 하려 하지만, 우연하게도 자꾸만 마주치게 된다.편지를 대신 써주며 사랑이 깊어간 엄마와 자신의 묘하게도 닮은 첫사랑. 이 우연의 일치에 내심 의아해하는 지혜는 상민에 대한 생각이 더욱 깊어만 간다. 하지만 이미 친구의 연인이 되어버린 그를 포기하기로 마음먹는데...', '에그필름', 'poster/클래식.jpg'),
(6, '건축학개론', '멜로, 로맨스', '국내', 118, '2012-03-22', '이용주', '엄태웅, 한가인, 이제훈, 수지, 조정석, 유연석', 12, '생기 넘치지만 숫기 없던 스무 살, 건축학과 승민은 \'건축학개론\' 수업에서 처음 만난 음대생 서연에게 반한다. 함께 숙제를 하게 되면서 차츰 마음을 열고 친해지지만, 자신의 마음을 표현하는 데 서툰 순진한 승민은 입 밖에 낼 수 없었던 고백을 마음 속에 품은 채 작은 오해로 인해 서연과 멀어지게 된다.\r\n 어쩌면 다시…사랑할 수 있을까? 15년 만에 그녀를 다시 만났다 서른 다섯의 건축가가 된 승민 앞에 15년 만에 불쑥 나타난 서연. 당황스러움을 감추지 못하는 승민에게 서연은 자신을 위한 집을 설계해달라고 한다. 자신의 이름을 건 첫 작품으로 서연의 집을 짓게 된 승민, 함께 집을 완성해 가는 동안 어쩌면 사랑이었을지 모를 그때의 기억이 되살아나 두 사람 사이에 새로운 감정이 쌓이기 시작하는데… ', '명필름', 'poster/건축학개론.jpg'),
(7, '아이 캔 스피크', '드라마', '국내', 119, '2017-09-21', '김현석', '나문희, 이제훈', 12, '꼭…하고 싶은 말이 있고, 듣고 싶은 말이 있다!온 동네를 휘저으며 무려 8천 건에 달하는 민원을 넣어 도깨비 할매라고 불리는 \'옥분\'. 20여 년간 누구도 막을 수 없었던 그녀 앞에 원칙주의 9급 공무원 \'민재\'가 나타나면서 팽팽한 긴장감이 흐른다. 민원 접수만큼이나 열심히 공부하던 영어가 좀처럼 늘지 않아 의기소침한 \'옥분\'은 원어민 수준의 영어를 구사하는 \'민재\'를 본 후 선생님이 되어 달라며 시간과 장소를 불문하고 부탁하기에 이른다. 둘만의 특별한 거래를 통해 결코 어울리지 않을 것 같았던 두 사람의 영어 수업이 시작되고, 함께하는 시간이 계속 될수록 서로를 이해하고 소통하게 되면서 친구이자 가족이 되어 간다. \'옥분\'이 영어 공부에 매달리는 이유가 내내 궁금하던 \'민재\'는 어느 날, 그녀가 영어로 꼭 하고 싶은 말이 있다는 것을 알게 되는데… ', '영화사시선, 명필름', 'poster/아이 캔 스피크.jpg'),
(8, '곤지암', '공포, 미스터리', '국내', 94, '2018-03-28', '정범식', '위하준, 박지현, 오아연, 문예원, 박성훈, 이승욱, 유제윤', 15, '공포 체험의 성지 \'곤지암 정신병원\' 1979년 환자 42명의 집단 자살과 병원장의 실종 이후, 섬뜩한 괴담으로 둘러싸인 곤지암 정신병원으로 공포체험을 떠난 7명의 멤버들 원장실, 집단 치료실, 실험실, 열리지 않는 402호… 괴담의 실체를 담아내기 위해 병원 내부를 촬영하기 시작하던 멤버들에게 상상도 못한 기이하고 공포스러운 일들이 실제로 벌어지기 시작 하는데… ', '하이브미디어코프', 'poster/곤지암.jpg'),
(9, '데드풀2', '액션, 모험, 코미디, SF', '해외', 117, '2018-05-16', '데이빗 레이치', '라이언 레이놀즈, 조슈 브롤린, 재지 비츠, 모레나 바카린', 19, '마침내, 그 분이 오신다! 이번엔 혼자가 아니다! 암치료를 위한 비밀 실험에 참여한 후, 강력한 힐링팩터 능력을 지닌 슈퍼히어로 데드풀로 거듭난 웨이드 윌슨(라이언 레놀즈), 운명의 여자친구 바네사(모레나 바카린)와 행복한 미래를 꿈꾸지만 다시 나락으로 떨어지고, 밑바닥까지 내려간 데드풀은 더 나은 사람이 되기로 결심한다. 어느 날, 미래에서 시간 여행이 가능한 용병 케이블(조슈 브롤린)이 찾아 오면서 새로운 사건이 발생하고 데드풀은 생각지도 못한 기상천외 패밀리를 결성하게 되는데...', '이십세기 폭스', 'poster/데드풀2.jpg'),
(10, '쥬라기 월드: 폴른 킹덤', '액션, 모험, SF', '해외', -1, NULL, '후안 안토니오 바요나', '크리스 프랫, 브라이스 달라스 하워드, 제프 골드브럼 ', -1, '진화는 위기가 된다 지상 최대의 테마파크 \'쥬라기 월드\'가 폐쇄된 이후 화산 폭발 조짐이 일어나자, 오웬(크리스 프랫)과 클레어(브라이스 달라스 하워드)는 공룡들의 멸종을 막기 위해 이슬라 누블라 섬으로 떠난다. 한편, 진화된 공룡들을 이용하려는 세력의 거대한 음모가 드러나고, 절대 지상에 존재해선 안될 위협적 공룡들이 마침내 세상 밖으로 등장하게 되는데···', '유니버셜 픽쳐스', 'poster/쥬라기 월드 폴른 킹덤.jpg'),
(11, '해리 포터와 마법사의 돌', '판타지, 가족, 모험, 액션', '해외', 152, '2001-12-14', '크리스 콜럼버스', '다니엘 래드클리프, 루퍼트 그린트, 엠마 왓슨 ', 0, '해리 포터(다니엘 래드클리프 분)는 위압적인 버논 숙부(리챠드 그리피스 분)와 냉담한 이모 페투니아 (피오나 쇼 분), 욕심 많고 버릇없는 사촌 더즐리(해리 멜링 분) 밑에서 갖은 구박을 견디며 계단 밑 벽장에서 생활한다. 어느 날 해리는 호그와트 지하실에 \'영원한 생을 가져다주는 마법사의 돌\'이 비밀리에 보관되어 있다는 것을 알게되고, 해리의 부모님을 죽인 볼드모트가 그 돌을 노린다는 사실도 알게 된다. 볼드모트는 바로 해리를 죽이려다 실패하고 이마에 번개모양의 흉터를 남긴 장본인이다. 해리는 볼드모트로부터 마법의 돌과 호그와트 마법학교를 지키기 위해 필사의 노력을 하는데...', '워너 브라더스', 'poster/해리 포터와 마법사의 돌.jpg'),
(12, '해리 포터와 비밀의 방', '판타지, 가족, 모험, 액션', '해외', 162, '2002-12-13', '크리스 콜럼버스', '다니엘 래드클리프, 루퍼트 그린트, 엠마 왓슨 ', 0, '1학년 때 해리가 보여준 영웅적인 활약상은 학교 전체에 소문이 나고, 그 덕에 해리는 원치 않는 관심의 초점이 된다. 론의 여동생 지니, 사진작가 지망생 콜린 크리비 등의 신입생과 어둠의 마법 방어술을 가르치는 신임 교수 질데로이 록허트가 새롭게 해리포터의 팬이 된다.\r\n  남의 시선 끌기를 좋아하는 잘난척하는 성격 탓에 주변에서 따돌림 당하는 록허트 교수는 해리와 친해지고 싶어 안달하지만, 그 역시 학교에서 일어나는 무서운 사건에 대해 뾰족한 설명을 못해준다. 모든 이목은 해리에게 집중되고, 결국 급우들은 해리를 의심하기에 이른다. 물론 론과 헤르미온느, 그리고 수수께끼의 일기장에 마음을 뺏긴 론의 동생 지니만은 끝까지 해리를 믿는다.\r\n  자신을 믿는 친구들을 실망시킬 수는 없는 법. 해리는 -도움을 준다며 되려 걸리적 대는 록허트 교수가 다소 방해가 되긴 하지만- 어둠의 세력과 맞서 싸울 결심을 하는데..', '워너 브라더스', 'poster/해리 포터와 비밀의 방.jpg'),
(13, '해리 포터와 아즈카반의 죄수', '판타지, 가족, 모험, 액션', '해외', 141, '2004-07-16', '크리스 콜럼버스', '다니엘 래드클리프, 루퍼트 그린트, 엠마 왓슨 ', 0, '호그와트에서의 3학년 수업은 해리에게 짜릿한 체험도 많이 안겨준다. \'벅빅\' (반은 독수리, 반은 말 모양의 일명 \'히포크리프\'란 생물)과 같은 흥미로운 짐승과의 만남, 사이빌 트릴로니 교수(엠마 톰슨)나 \'그림\'으로 알려진 죽음의 징조와의 섬뜩한 대면 등등. 그외에도 해리에겐 또 다른 문제가 찾아온다. 헤르미온느(엠마 왓슨)가 갑자기 사라졌다 나타났다 하는 이상한 돌출 행동을 보이기 시작한 것. 친구 론(루퍼트 그린트)과, 새 학기 들어 \'신비한 동물 돌보기\' 과목 교수로 발령 난 거인 해그리드 (로비 콜트레인)의 도움으로 해리는 그 수수께끼를 풀어나간다. 시리우스 블랙과 해리의 불가피한 대결은 점점 다가오고, 루핀 교수와 블랙의 모호한 관계는 해리를 혼란에 빠뜨린다. 스네이프 교수(알란 릭만)가 그토록 밝히고자 하는 어두운 비밀은 또 과연 무엇인가? 해리는 자신의 모든 용기와 마법의 힘과 친구들의 도움을 총동원, 이러한 의문점들을 풀고 자신과 시리우스 블랙 사이에 얽혀있는 비밀을 파헤쳐 가는데...', '워너 브라더스', 'poster/해리 포터와 아즈카반의 죄수.jpg'),
(14, '해리 포터와 불의 잔', '판타지, 가족, 모험, 액션', '해외', 156, '2005-12-01', '마이크 뉴웰', '다니엘 래드클리프, 루퍼트 그린트, 엠마 왓슨 ', 12, '호그와트 교정에서 누군가 살해되면서 상황은 급변한다. 볼드모트의 악몽으로 두려움에 휩싸인 해리는 덤블도어를 찾아가지만 그 역시도 뚜렷한 해답을 제시하지 못한다. 경기가 진행되고, 해리와 다른 출전자들이 마지막 과제를 풀기 위해 안간힘을 쓰고 있을 때 무언가가 계속 이들을 주시한다. 승리가 목전에 다가온 그 순간, 이제까지의 모든 진실이 밝혀지고 해리포터에게는 진정한 악과의 피할 수 없는 대결이 기다리고 있는데....', '워너 브라더스', 'poster/해리 포터와 불의 잔.jpg'),
(15, '해리 포터와 불사조 기사단', '판타지, 가족, 모험, 액션', '해외', 137, '2007-07-11', '데이빗 예이츠', '다니엘 래드클리프, 루퍼트 그린트, 엠마 왓슨 ', 0, '헤르미온느와 론은 해리의 능력을 믿고 자칭 \'덤블도어의 군대\'라고 명명한 비밀단체를 조직한다. 해리는 어둠의 마법에 맞서 스스로를 지켜낼 수 있는 방법을 학생들에게 가르쳐주며 앞으로 닥칠 격전에 대비시킨다. 그러나 밤마다 불길한 사건을 예견하는 악몽에 시달리는 해리. 이제 볼드모트와의 대결이 머지 않았음을 느끼게 된다. 시리우스가 공격 당하는 악몽을 꾼 해리는 덤블도어 군대와 함께 마법부 미스터리 부서 예언의 방으로 향한다. 그리고 이어 나타난 죽음을 먹는 자들…. 빛의 마법과 어둠의 마법간의 불꽃 튀는 대결 해리포터와 불사조 기사단, 호그와트의 운명이 그들에게 달렸다!', '워너 브라더스', 'poster/해리 포터와 불사조 기사단.jpg'),
(16, '반지의 제왕: 반지 원정대', '판타지, 모험, 액션', '해외', 228, '2001-12-31', '피터 잭슨', '일라이저 우드, 이안 맥켈런, 리브 타일러, 비고 모텐슨, 숀 애스틴, 케이트 블란쳇', 12, '모든 힘을 지배할 악의 군주 \'사우론\'의 절대반지가 깨어나고\r\n 악의 세력이 세상을 지배해가며 중간계는 대혼란에 처한다.\r\n\r\n 호빗 \'프로도\'와 그의 친구들, 엘프 \'레골라스\', 인간 전사 \'아라곤\'과 \'보로미르\'\r\n 드워프 \'김리\' 그리고 마법사 \'간달프\'로 구성된 반지원정대는\r\n 평화를 지키기 위해 절대반지를 파괴할 유일한 방법인\r\n 반지가 만들어진 모르도르를 향해 목숨을 건 여정을 떠난다.\r\n \r\n 한편, 점점 세력을 넓혀온 사우론과의 피할 수 없는 전쟁을 앞둔\r\n 반지원정대는 드디어 거대한 최후의 전쟁을 시작하는데...', '워너 브라더스', 'poster/반지의 제왕 반지 원정대.jpg'),
(17, '반지의 제왕: 두 개의 탑', '판타지, 모험, 액션', '해외', 235, '2002-12-19', '피터 잭슨', '일라이저 우드, 이안 맥켈런, 리브 타일러, 비고 모텐슨, 숀 애스틴, 케이트 블란쳇', 12, '모든 힘을 지배할 악의 군주 \'사우론\'의 절대반지가 깨어나고\r\n 악의 세력이 세상을 지배해가며 중간계는 대혼란에 처한다.\r\n \r\n 호빗 \'프로도\'와 그의 친구들, 엘프 \'레골라스\', 인간 전사 \'아라곤\'과 \'보로미르\'\r\n 드워프 \'김리\' 그리고 마법사 \'간달프\'로 구성된 반지원정대는\r\n 평화를 지키기 위해 절대반지를 파괴할 유일한 방법인\r\n 반지가 만들어진 모르도르를 향해 목숨을 건 여정을 떠난다.\r\n \r\n 한편, 점점 세력을 넓혀온 사우론과의 피할 수 없는 전쟁을 앞둔\r\n 반지원정대는 드디어 거대한 최후의 전쟁을 시작하는데...', '워너 브라더스', 'poster/반지의 제왕 두 개의 탑.jpg'),
(18, '반지의 제왕: 왕의 귀환', '판타지, 모험, 액션', '해외', 263, '2003-12-17', '피터 잭슨', '일라이저 우드, 이안 맥켈런, 리브 타일러, 비고 모텐슨, 숀 애스틴, 앤디 서키스', 12, '모든 힘을 지배할 악의 군주 \'사우론\'의 절대반지가 깨어나고\r\n 악의 세력이 세상을 지배해가며 중간계는 대혼란에 처한다.\r\n \r\n 호빗 \'프로도\'와 그의 친구들, 엘프 \'레골라스\', 인간 전사 \'아라곤\'과 \'보로미르\'\r\n 드워프 \'김리\' 그리고 마법사 \'간달프\'로 구성된 반지원정대는\r\n 평화를 지키기 위해 절대반지를 파괴할 유일한 방법인\r\n 반지가 만들어진 모르도르를 향해 목숨을 건 여정을 떠난다.\r\n \r\n 한편, 점점 세력을 넓혀온 사우론과의 피할 수 없는 전쟁을 앞둔\r\n 반지원정대는 드디어 거대한 최후의 전쟁을 시작하는데...', '워너 브라더스', 'poster/반지의 제왕 왕의 귀환.jpg'),
(19, '탐정: 리턴즈', '코미디, 범죄', '국내', 116, NULL, '이언희', '권상우, 성동일, 이광수', 12, '셜록 덕후 만화방 주인 \'강대만\'(권상우)과 광역수사대 레전드 형사 \'노태수\'(성동일)!\r\n 드디어 대한민국 최초 탐정사무소를 개업하고,\r\n 전직 사이버 수사대 에이스 \'여치\'(이광수)까지 영입하며 탐정으로서의 첫 발을 내딛는다.\r\n \r\n 하지만 꿈과 현실은 다른 법!\r\n 기다리는 사건 대신 파리만 날리고, 생활비 압박에 결국 경찰서까지 찾아가 몰래 영업을 뛰기 시작한다.\r\n \r\n 드디어 기다림 끝에 찾아온 첫 의뢰인.\r\n 게다가 성공보수는 무려 5천만원!\r\n 자신만만하게 사건을 받아 든 세 사람은 파헤칠수록 꼬리에 꼬리를 무는 의심스러운 증거들로 혼란에 빠지기 시작하는데… ', '크리픽쳐스', 'poster/탐정 리턴즈.jpg');

-- --------------------------------------------------------

--
-- 테이블 구조 `movieschedulelist`
--

CREATE TABLE `movieschedulelist` (
  `schedule_id` int(11) NOT NULL,
  `movie_id` int(11) DEFAULT NULL,
  `screen_room_id` int(11) DEFAULT NULL,
  `date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `movieschedulelist`
--

INSERT INTO `movieschedulelist` (`schedule_id`, `movie_id`, `screen_room_id`, `date`) VALUES
(1, 2, 1, '2018-05-17 10:00:00'),
(2, 8, 2, '2018-05-17 12:00:00'),
(3, 9, 2, '2018-05-17 17:20:00'),
(4, 9, 3, '2018-05-17 13:00:00'),
(5, 2, 3, '2018-05-17 20:00:00'),
(6, 2, 4, '2018-05-17 15:30:00'),
(7, 9, 4, '2018-05-17 22:00:00'),
(8, 2, 1, '2018-05-18 10:40:00'),
(9, 8, 1, '2018-05-18 14:20:00'),
(10, 8, 2, '2018-05-18 12:45:00'),
(11, 9, 2, '2018-05-18 17:00:00'),
(12, 9, 3, '2018-05-18 13:55:00'),
(13, 2, 3, '2018-05-18 20:00:00'),
(14, 2, 4, '2018-05-18 15:10:00'),
(15, 9, 4, '2018-05-18 22:10:00'),
(16, 2, 1, '2018-05-19 09:40:00'),
(17, 8, 1, '2018-05-19 14:50:00'),
(18, 8, 2, '2018-05-19 12:35:00'),
(19, 9, 2, '2018-05-19 17:00:00'),
(20, 9, 3, '2018-05-19 13:05:00'),
(21, 2, 3, '2018-05-19 20:30:00'),
(22, 2, 4, '2018-05-19 15:25:00'),
(23, 9, 4, '2018-05-19 22:15:00');

-- --------------------------------------------------------

--
-- 테이블 구조 `reservationlist`
--

CREATE TABLE `reservationlist` (
  `reserve_id` int(11) NOT NULL,
  `customer_id` int(11) DEFAULT NULL,
  `reserve_date` datetime DEFAULT NULL,
  `schedule_id` int(11) NOT NULL,
  `price` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `reservationlist`
--

INSERT INTO `reservationlist` (`reserve_id`, `customer_id`, `reserve_date`, `schedule_id`, `price`) VALUES
(1, 2, '2018-05-13 12:50:33', 3, 30000),
(2, 5, '2018-05-13 12:55:15', 5, 20000),
(3, 7, '2018-05-13 16:15:00', 14, 8500),
(4, 1, '2018-05-14 06:10:00', 1, 8000),
(5, 10, '2018-05-14 08:20:03', 2, 20000),
(6, 9, '2018-05-15 23:40:14', 9, 28000),
(7, 4, '2018-05-16 06:22:58', 13, 24000),
(8, 4, '2018-05-17 12:00:00', 2, 10000),
(10, 2, '2018-05-18 13:55:00', 12, 20000),
(11, 2, '2018-05-19 09:40:00', 16, 100000),
(12, 2, '2018-05-17 10:00:00', 1, 100000),
(13, 2, '2018-05-19 15:25:00', 22, 100000),
(14, 2, '2018-05-19 20:30:00', 21, 85000),
(15, 5, '2018-05-17 12:00:00', 2, 100000),
(16, 5, '2018-05-19 14:50:00', 17, 100000),
(17, 5, '2018-05-19 12:35:00', 18, 100000),
(18, 5, '2018-05-17 12:00:00', 2, 50000),
(19, 5, '2018-05-19 17:00:00', 19, 17000),
(20, 5, '2018-05-25 08:23:06', 18, 8500),
(21, 5, '2018-05-26 00:26:47', 7, 8500),
(22, 8, '2018-05-26 00:32:03', 13, 70000),
(23, 8, '2018-05-26 00:32:38', 17, 140000);

-- --------------------------------------------------------

--
-- Stand-in structure for view `reservedrate`
-- (See below for the actual view)
--
CREATE TABLE `reservedrate` (
`movie_id` int(11)
,`totalseat` bigint(23)
,`reservedseatnum` decimal(42,0)
,`reserved_rate` decimal(49,4)
);

-- --------------------------------------------------------

--
-- Stand-in structure for view `reservedseat`
-- (See below for the actual view)
--
CREATE TABLE `reservedseat` (
`movie_id` int(11)
,`reservedseatnum` decimal(42,0)
);

-- --------------------------------------------------------

--
-- 테이블 구조 `screenroomlist`
--

CREATE TABLE `screenroomlist` (
  `screen_room_id` int(11) NOT NULL,
  `screen_room_type` varchar(20) DEFAULT NULL,
  `capacity` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `screenroomlist`
--

INSERT INTO `screenroomlist` (`screen_room_id`, `screen_room_type`, `capacity`) VALUES
(1, '2D', 40),
(2, '2D', 40),
(3, '3D', 40),
(4, 'IMAX', 40);

-- --------------------------------------------------------

--
-- 테이블 구조 `seatinfolist`
--

CREATE TABLE `seatinfolist` (
  `screen_room_id` int(11) DEFAULT NULL,
  `seat_id` varchar(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `seatinfolist`
--

INSERT INTO `seatinfolist` (`screen_room_id`, `seat_id`) VALUES
(1, 'A01'),
(1, 'A02'),
(1, 'A03'),
(1, 'B01'),
(1, 'B02'),
(1, 'B03'),
(1, 'B04'),
(1, 'B05'),
(1, 'B06'),
(1, 'B07'),
(1, 'C01'),
(1, 'C02'),
(1, 'C03'),
(1, 'C04'),
(1, 'C05'),
(1, 'C06'),
(1, 'C07'),
(1, 'D01'),
(1, 'D02'),
(1, 'D03'),
(1, 'D04'),
(1, 'D05'),
(1, 'D06'),
(1, 'D07'),
(1, 'E01'),
(1, 'E02'),
(1, 'E03'),
(1, 'E04'),
(1, 'E05'),
(1, 'E06'),
(1, 'E07'),
(1, 'F01'),
(1, 'F02'),
(1, 'F03'),
(1, 'F04'),
(1, 'F05'),
(1, 'G01'),
(1, 'G02'),
(1, 'G03'),
(1, 'G04'),
(1, 'G05'),
(2, 'A01'),
(2, 'A02'),
(2, 'A03'),
(2, 'B01'),
(2, 'B02'),
(2, 'B03'),
(2, 'B04'),
(2, 'B05'),
(2, 'B06'),
(2, 'B07'),
(2, 'C01'),
(2, 'C02'),
(2, 'C03'),
(2, 'C04'),
(2, 'C05'),
(2, 'C06'),
(2, 'C07'),
(2, 'D01'),
(2, 'D02'),
(2, 'D03'),
(2, 'D04'),
(2, 'D05'),
(2, 'D06'),
(2, 'D07'),
(2, 'E01'),
(2, 'E02'),
(2, 'E03'),
(2, 'E04'),
(2, 'E05'),
(2, 'E06'),
(2, 'E07'),
(2, 'F01'),
(2, 'F02'),
(2, 'F03'),
(2, 'F04'),
(2, 'F05'),
(2, 'G01'),
(2, 'G02'),
(2, 'G03'),
(2, 'G04'),
(2, 'G05'),
(3, 'A01'),
(3, 'A02'),
(3, 'A03'),
(3, 'B01'),
(3, 'B02'),
(3, 'B03'),
(3, 'B04'),
(3, 'B05'),
(3, 'B06'),
(3, 'B07'),
(3, 'C01'),
(3, 'C02'),
(3, 'C03'),
(3, 'C04'),
(3, 'C05'),
(3, 'C06'),
(3, 'C07'),
(3, 'D01'),
(3, 'D02'),
(3, 'D03'),
(3, 'D04'),
(3, 'D05'),
(3, 'D06'),
(3, 'D07'),
(3, 'E01'),
(3, 'E02'),
(3, 'E03'),
(3, 'E04'),
(3, 'E05'),
(3, 'E06'),
(3, 'E07'),
(3, 'F01'),
(3, 'F02'),
(3, 'F03'),
(3, 'F04'),
(3, 'F05'),
(3, 'G01'),
(3, 'G02'),
(3, 'G03'),
(3, 'G04'),
(3, 'G05'),
(4, 'A01'),
(4, 'A02'),
(4, 'A03'),
(4, 'B01'),
(4, 'B02'),
(4, 'B03'),
(4, 'B04'),
(4, 'B05'),
(4, 'B06'),
(4, 'B07'),
(4, 'C01'),
(4, 'C02'),
(4, 'C03'),
(4, 'C04'),
(4, 'C05'),
(4, 'C06'),
(4, 'C07'),
(4, 'D01'),
(4, 'D02'),
(4, 'D03'),
(4, 'D04'),
(4, 'D05'),
(4, 'D06'),
(4, 'D07'),
(4, 'E01'),
(4, 'E02'),
(4, 'E03'),
(4, 'E04'),
(4, 'E05'),
(4, 'E06'),
(4, 'E07'),
(4, 'F01'),
(4, 'F02'),
(4, 'F03'),
(4, 'F04'),
(4, 'F05'),
(4, 'G01'),
(4, 'G02'),
(4, 'G03'),
(4, 'G04'),
(4, 'G05');

-- --------------------------------------------------------

--
-- 테이블 구조 `seatlist`
--

CREATE TABLE `seatlist` (
  `seat_id` varchar(20) NOT NULL,
  `schedule_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `seatlist`
--

INSERT INTO `seatlist` (`seat_id`, `schedule_id`) VALUES
('A01', 1),
('A02', 1),
('A03', 1),
('A04', 1),
('A05', 1),
('A06', 1),
('A07', 1),
('A08', 1),
('A09', 1),
('A10', 1),
('B01', 1),
('A01', 2),
('A02', 2),
('A03', 2),
('A04', 2),
('A05', 2),
('A06', 2),
('A07', 2),
('A08', 2),
('A09', 2),
('A10', 2),
('B03', 2),
('B04', 2),
('C01', 2),
('C02', 2),
('C03', 2),
('C04', 2),
('C05', 2),
('A01', 3),
('A02', 3),
('A03', 3),
('A05', 5),
('A06', 5),
('A01', 7),
('A01', 9),
('A02', 9),
('A03', 9),
('A04', 9),
('A01', 12),
('A02', 12),
('A01', 13),
('A02', 13),
('A03', 13),
('A04', 13),
('A05', 13),
('A06', 13),
('A07', 13),
('A08', 13),
('A09', 13),
('A10', 13),
('C02', 13),
('C03', 13),
('C04', 13),
('A03', 14),
('A01', 16),
('A02', 16),
('A03', 16),
('A04', 16),
('A05', 16),
('A06', 16),
('A07', 16),
('A08', 16),
('A09', 16),
('A10', 16),
('A01', 17),
('A02', 17),
('A03', 17),
('A04', 17),
('A05', 17),
('A06', 17),
('A07', 17),
('A08', 17),
('A09', 17),
('A10', 17),
('B01', 17),
('B02', 17),
('B03', 17),
('B04', 17),
('B05', 17),
('B06', 17),
('B07', 17),
('B08', 17),
('B09', 17),
('B10', 17),
('C01', 17),
('C02', 17),
('C03', 17),
('C04', 17),
('C05', 17),
('C06', 17),
('C07', 17),
('C08', 17),
('C09', 17),
('C10', 17),
('A01', 18),
('A02', 18),
('A03', 18),
('A04', 18),
('A05', 18),
('A06', 18),
('A07', 18),
('A08', 18),
('A09', 18),
('A10', 18),
('C01', 18),
('A01', 19),
('A02', 19),
('A01', 21),
('A02', 21),
('A03', 21),
('A04', 21),
('A05', 21),
('A06', 21),
('A07', 21),
('A08', 21),
('A09', 21),
('A10', 21),
('A01', 22),
('A02', 22),
('A03', 22),
('A04', 22),
('A05', 22),
('A06', 22),
('A07', 22),
('A08', 22),
('A09', 22),
('A10', 22);

-- --------------------------------------------------------

--
-- 테이블 구조 `ticketlist`
--

CREATE TABLE `ticketlist` (
  `ticket_id` int(11) NOT NULL,
  `reserve_id` int(11) NOT NULL,
  `seat_id` varchar(20) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `ticketlist`
--

INSERT INTO `ticketlist` (`ticket_id`, `reserve_id`, `seat_id`) VALUES
(1, 1, 'A01'),
(2, 1, 'A02'),
(3, 1, 'A03'),
(4, 2, 'A05'),
(5, 2, 'A06'),
(6, 3, 'A03'),
(7, 4, 'B01'),
(8, 5, 'B03'),
(9, 5, 'B04'),
(10, 6, 'A01'),
(12, 6, 'A02'),
(13, 6, 'A03'),
(14, 6, 'A04'),
(15, 7, 'C02'),
(16, 7, 'C03'),
(17, 7, 'C04'),
(18, 10, 'A01'),
(19, 10, 'A02'),
(20, 11, 'A01'),
(21, 11, 'A02'),
(22, 11, 'A03'),
(23, 11, 'A04'),
(24, 11, 'A05'),
(25, 11, 'A06'),
(26, 11, 'A07'),
(27, 11, 'A08'),
(28, 11, 'A09'),
(29, 11, 'A10'),
(30, 12, 'A01'),
(31, 12, 'A02'),
(32, 12, 'A03'),
(33, 12, 'A04'),
(34, 12, 'A05'),
(35, 12, 'A06'),
(36, 12, 'A07'),
(37, 12, 'A08'),
(38, 12, 'A09'),
(39, 12, 'A10'),
(40, 13, 'A01'),
(41, 13, 'A02'),
(42, 13, 'A03'),
(43, 13, 'A04'),
(44, 13, 'A05'),
(45, 13, 'A06'),
(46, 13, 'A07'),
(47, 13, 'A08'),
(48, 13, 'A09'),
(49, 13, 'A10'),
(50, 14, 'A01'),
(51, 14, 'A02'),
(52, 14, 'A03'),
(53, 14, 'A04'),
(54, 14, 'A05'),
(55, 14, 'A06'),
(56, 14, 'A07'),
(57, 14, 'A08'),
(58, 14, 'A09'),
(59, 14, 'A10'),
(60, 15, 'A01'),
(61, 15, 'A02'),
(62, 15, 'A03'),
(63, 15, 'A04'),
(64, 15, 'A05'),
(65, 15, 'A06'),
(66, 15, 'A07'),
(67, 15, 'A08'),
(68, 15, 'A09'),
(69, 15, 'A10'),
(70, 16, 'A01'),
(71, 16, 'A02'),
(72, 16, 'A03'),
(73, 16, 'A04'),
(74, 16, 'A05'),
(75, 16, 'A06'),
(76, 16, 'A07'),
(77, 16, 'A08'),
(78, 16, 'A09'),
(79, 16, 'A10'),
(80, 17, 'A01'),
(81, 17, 'A02'),
(82, 17, 'A03'),
(83, 17, 'A04'),
(84, 17, 'A05'),
(85, 17, 'A06'),
(86, 17, 'A07'),
(87, 17, 'A08'),
(88, 17, 'A09'),
(89, 17, 'A10'),
(90, 18, 'C01'),
(91, 18, 'C02'),
(92, 18, 'C03'),
(93, 18, 'C04'),
(94, 18, 'C05'),
(95, 19, 'A01'),
(96, 19, 'A02'),
(97, 20, 'C01'),
(98, 21, 'A01'),
(99, 22, 'A01'),
(100, 22, 'A02'),
(101, 22, 'A03'),
(102, 22, 'A04'),
(103, 22, 'A05'),
(104, 22, 'A06'),
(105, 22, 'A07'),
(106, 22, 'A08'),
(107, 22, 'A09'),
(108, 22, 'A10'),
(109, 23, 'B01'),
(110, 23, 'B02'),
(111, 23, 'B03'),
(112, 23, 'B04'),
(113, 23, 'B05'),
(114, 23, 'B06'),
(115, 23, 'B07'),
(116, 23, 'B08'),
(117, 23, 'B09'),
(118, 23, 'B10'),
(119, 23, 'C01'),
(120, 23, 'C02'),
(121, 23, 'C03'),
(122, 23, 'C04'),
(123, 23, 'C05'),
(124, 23, 'C06'),
(125, 23, 'C07'),
(126, 23, 'C08'),
(127, 23, 'C09'),
(128, 23, 'C10');

-- --------------------------------------------------------

--
-- Stand-in structure for view `totalseat`
-- (See below for the actual view)
--
CREATE TABLE `totalseat` (
`movie_id` int(11)
,`NumOfSchedule` bigint(21)
,`totalseat` bigint(23)
);

-- --------------------------------------------------------

--
-- 뷰 구조 `countlikenum`
--
DROP TABLE IF EXISTS `countlikenum`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `countlikenum`  AS  select count(`cuscomlike`.`customer_id`) AS `counter`,`cuscomlike`.`comment_id` AS `comment_id` from `cuscomlike` group by `cuscomlike`.`comment_id` order by `counter` desc ;

-- --------------------------------------------------------

--
-- 뷰 구조 `cuscomlike`
--
DROP TABLE IF EXISTS `cuscomlike`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `cuscomlike`  AS  select `customer`.`username` AS `username`,`customer`.`comment_id` AS `comment_id`,`customer`.`customer_id` AS `customer_id`,`commentlist`.`movie_id` AS `movie_id`,`commentlist`.`starpoint` AS `starpoint`,`commentlist`.`datetime` AS `datetime`,`commentlist`.`message` AS `message` from (`customer` join `commentlist` on((`customer`.`comment_id` = `commentlist`.`comment_id`))) ;

-- --------------------------------------------------------

--
-- 뷰 구조 `customer`
--
DROP TABLE IF EXISTS `customer`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `customer`  AS  select `customerlist`.`username` AS `username`,`customerlist`.`customer_id` AS `customer_id`,`likelist`.`comment_id` AS `comment_id` from (`customerlist` join `likelist` on((`customerlist`.`customer_id` = `likelist`.`customer_id`))) ;

-- --------------------------------------------------------

--
-- 뷰 구조 `reservedrate`
--
DROP TABLE IF EXISTS `reservedrate`;
-- Error reading structure for table ressystem.reservedrate: #1046 - 선택된 데이타베이스가 없습니다.

-- --------------------------------------------------------

--
-- 뷰 구조 `reservedseat`
--
DROP TABLE IF EXISTS `reservedseat`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `reservedseat`  AS  select `movieschedulelist`.`movie_id` AS `movie_id`,sum(`sl`.`count`) AS `reservedseatnum` from (`movieschedulelist` join (select `seatlist`.`schedule_id` AS `schedule_id`,count(`seatlist`.`schedule_id`) AS `count` from `seatlist` group by `seatlist`.`schedule_id`) `sl` on((`movieschedulelist`.`schedule_id` = `sl`.`schedule_id`))) where (`movieschedulelist`.`schedule_id` = `sl`.`schedule_id`) group by `movieschedulelist`.`movie_id` ;

-- --------------------------------------------------------

--
-- 뷰 구조 `totalseat`
--
DROP TABLE IF EXISTS `totalseat`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `totalseat`  AS  select `movieschedulelist`.`movie_id` AS `movie_id`,count(`movieschedulelist`.`movie_id`) AS `NumOfSchedule`,(40 * count(`movieschedulelist`.`movie_id`)) AS `totalseat` from `movieschedulelist` group by `movieschedulelist`.`movie_id` ;

--
-- 덤프된 테이블의 인덱스
--

--
-- 테이블의 인덱스 `commentlist`
--
ALTER TABLE `commentlist`
  ADD PRIMARY KEY (`comment_id`);

--
-- 테이블의 인덱스 `customerlist`
--
ALTER TABLE `customerlist`
  ADD PRIMARY KEY (`customer_id`);

--
-- 테이블의 인덱스 `likelist`
--
ALTER TABLE `likelist`
  ADD PRIMARY KEY (`comment_id`,`customer_id`),
  ADD KEY `customer_id` (`customer_id`);

--
-- 테이블의 인덱스 `movieinfolist`
--
ALTER TABLE `movieinfolist`
  ADD PRIMARY KEY (`movie_id`);

--
-- 테이블의 인덱스 `movieschedulelist`
--
ALTER TABLE `movieschedulelist`
  ADD PRIMARY KEY (`schedule_id`),
  ADD KEY `movie_id` (`movie_id`),
  ADD KEY `screen_room_id` (`screen_room_id`);

--
-- 테이블의 인덱스 `reservationlist`
--
ALTER TABLE `reservationlist`
  ADD PRIMARY KEY (`reserve_id`),
  ADD KEY `customer_id` (`customer_id`),
  ADD KEY `schedule_id` (`schedule_id`);

--
-- 테이블의 인덱스 `screenroomlist`
--
ALTER TABLE `screenroomlist`
  ADD PRIMARY KEY (`screen_room_id`);

--
-- 테이블의 인덱스 `seatlist`
--
ALTER TABLE `seatlist`
  ADD PRIMARY KEY (`seat_id`,`schedule_id`),
  ADD KEY `schedule_id` (`schedule_id`);

--
-- 테이블의 인덱스 `ticketlist`
--
ALTER TABLE `ticketlist`
  ADD PRIMARY KEY (`ticket_id`),
  ADD KEY `reserve_id` (`reserve_id`);

--
-- 덤프된 테이블의 AUTO_INCREMENT
--

--
-- 테이블의 AUTO_INCREMENT `commentlist`
--
ALTER TABLE `commentlist`
  MODIFY `comment_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=54;

--
-- 테이블의 AUTO_INCREMENT `customerlist`
--
ALTER TABLE `customerlist`
  MODIFY `customer_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=13;

--
-- 테이블의 AUTO_INCREMENT `movieinfolist`
--
ALTER TABLE `movieinfolist`
  MODIFY `movie_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=20;

--
-- 테이블의 AUTO_INCREMENT `movieschedulelist`
--
ALTER TABLE `movieschedulelist`
  MODIFY `schedule_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=24;

--
-- 테이블의 AUTO_INCREMENT `reservationlist`
--
ALTER TABLE `reservationlist`
  MODIFY `reserve_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=24;

--
-- 테이블의 AUTO_INCREMENT `ticketlist`
--
ALTER TABLE `ticketlist`
  MODIFY `ticket_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=129;

--
-- 덤프된 테이블의 제약사항
--

--
-- 테이블의 제약사항 `likelist`
--
ALTER TABLE `likelist`
  ADD CONSTRAINT `likelist_ibfk_1` FOREIGN KEY (`comment_id`) REFERENCES `commentlist` (`comment_id`),
  ADD CONSTRAINT `likelist_ibfk_2` FOREIGN KEY (`customer_id`) REFERENCES `customerlist` (`customer_id`);

--
-- 테이블의 제약사항 `movieschedulelist`
--
ALTER TABLE `movieschedulelist`
  ADD CONSTRAINT `movieschedulelist_ibfk_1` FOREIGN KEY (`movie_id`) REFERENCES `movieinfolist` (`movie_id`),
  ADD CONSTRAINT `movieschedulelist_ibfk_2` FOREIGN KEY (`screen_room_id`) REFERENCES `screenroomlist` (`screen_room_id`);

--
-- 테이블의 제약사항 `reservationlist`
--
ALTER TABLE `reservationlist`
  ADD CONSTRAINT `reservationlist_ibfk_1` FOREIGN KEY (`customer_id`) REFERENCES `customerlist` (`customer_id`),
  ADD CONSTRAINT `reservationlist_ibfk_2` FOREIGN KEY (`schedule_id`) REFERENCES `movieschedulelist` (`schedule_id`);

--
-- 테이블의 제약사항 `seatlist`
--
ALTER TABLE `seatlist`
  ADD CONSTRAINT `seatlist_ibfk_1` FOREIGN KEY (`schedule_id`) REFERENCES `movieschedulelist` (`schedule_id`);

--
-- 테이블의 제약사항 `ticketlist`
--
ALTER TABLE `ticketlist`
  ADD CONSTRAINT `ticketlist_ibfk_1` FOREIGN KEY (`reserve_id`) REFERENCES `reservationlist` (`reserve_id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
